<?xml version="1.0" encoding="UTF-8" ?>
<!-- *********************************************************************-->
<!-- Copyright 2016-2018                                                  -->
<!-- Portland Community College                                           -->
<!--                                                                      -->
<!-- This file is part of Open Resources for Community College Algebra    -->
<!-- (ORCCA).                                                             -->
<!-- *********************************************************************-->
<section permid="hvK" xml:id="section-adding-and-subtracting-polynomials">
  <title>Adding and Subtracting Polynomials</title>
  <objectives permid="GWJ">
    <title>PCC Course Content and Outcome Guide</title>
    <ul permid="hoG">
      <li permid="bzu">
        <xref ref="mth65-add-subtract-multiply-square-polynomials" />
      </li>
    </ul>
  </objectives>

  <introduction permid="ndS">
    <figure permid="Ucm">
      <caption>Alternative Video Lesson</caption>
      <video youtubeplaylist="PLmuZCPhWPt-ef9FnOLhpBG_Z0sQd6-7s-" />
    </figure>

    <p permid="HNU">
      A polynomial is a particular type of algebraic expression used for things all around us.

      <ul permid="tCY">
        <li permid="HGD">
          <p permid="jso">
            A company's sales, <m>s</m>
            (in millions of dollars),
            can be modeled by <m>2.2t+5.8</m>,
            where <m>t</m> stands for the number of years since <m>2010</m>.
          </p>
        </li>

        <li permid="nNM">
          <p permid="Pzx">
            The height of an object from the ground, <m>h</m>
            (in feet),
            launched upward from the top of a building can be modeled by <m>-16t^2+32t+300</m>,
            where <m>t</m> represents the amount of time
            (in seconds)
            since the launch.
          </p>
        </li>

        <li permid="TUV">
          <p permid="vGG">
            The volume of an open-top box with a square base, <m>V</m>
            (in cubic inches),
            can be calculated by <m>30s^2-\frac{1}{2}s^2</m>,
            where <m>s</m> stands for the length of the square base,
            and the box sides have to be cut from a certain square piece of metal.
          </p>
        </li>
      </ul>
    </p>

    <p permid="nVd">
      All of the expressions above are <term>polynomials</term>.
      In this section,
      we will learn some basic vocabulary relating to polynomials and we'll then learn how to add and subtract polynomials.
    </p>
  </introduction>

  <subsection permid="NCT">
    <title>Polynomial Vocabulary</title>
    <definition permid="bGy" xml:id="definition-polynomial">
      <idx><h>polynomial</h></idx>
      <statement>
        <p permid="hvX">
          A <term>polynomial</term> is an expression that consists of terms summed together.
          Each term must be the product of a number and one or more variables raised to whole number powers.
          Since <m>0</m> is a whole number,
          a term can just be a number.
          A polynomial may have just one term.
          The expression <m>0</m> is also considered a polynomial,
          with zero terms.
        </p>
      </statement>
    </definition>

    <p permid="BYI">
      Some examples of polynomials in one variable are:
      <me permid="IxO">
        x^2-5x+2\qquad t^3-1\qquad 7y
      </me>.
      The expression <m>3x^4y^3+7xy^2-12xy</m> is an example of a polynomial in several variables.
    </p>

    <definition permid="HNH" xml:id="definition-term-polynomial">
      <idx><h>polynomial</h><h>terms of</h></idx>
      <statement>
        <p permid="NDg">
          A <term>term</term>
              <idx><h>term</h></idx>
          of a polynomial is the product of a numerical coefficient and one or more variables raised to whole number powers.
          Since <m>0</m> is a whole number,
          a term can just be a number.
        </p>
      </statement>
    </definition>

    <p permid="ifR">
      For example:

      <ul permid="CWK">
        <li permid="Ace">
          <p permid="bNP">
            the polynomial <m>x^2-5x+3</m> has three terms:
            <m>x^2</m>, <m>-5x</m>, and <m>3</m>;
          </p>
        </li>

        <li permid="gjn">
          <p permid="HUY">
            the polynomial <m> 3x^4+7xy^2-12xy</m> also has three terms;
          </p>
        </li>

        <li permid="Mqw">
          <p permid="och">
            the polynomial <m>t^3-1</m> has two terms.
          </p>
        </li>
      </ul>
    </p>

    <definition permid="nUQ" xml:id="definition-coefficient">
      <idx><h>polynomial</h><h>coefficients of</h></idx>
      <idx>coefficient</idx>
      <statement>
        <p permid="tKp">
          The <term>coefficient</term>
          (or numerical coefficient)
          of a term is the numerical factor in the term.
        </p>
      </statement>
    </definition>

    <p permid="Ona">
      For example:

      <ul permid="jdT">
        <li permid="sxF">
          <p permid="Ujq">
            the coefficient of the term
            <m>\frac{4}{3}x^6</m> is <m>\frac{4}{3}</m>;
          </p>
        </li>

        <li permid="YEO">
          <p permid="Aqz">
            the coefficient of the second term of the polynomial <m>x^2-5x+3</m> is <m>-5</m>;
          </p>
        </li>

        <li permid="ELX">
          <p permid="gxI">
            the coefficient of the term
            <m>\frac{y^7}{4}</m> is <m>\frac{1}{4}</m>.
          </p>
        </li>
      </ul>
    </p>

    <remark>
      <p permid="uuj">
        Because variables in polynomials must have whole number exponents,
        a polynomial will never have a variable in the denominator of a fraction or under a square root
        (or any other radical).
      </p>
    </remark>

    <exercise permid="YLS">
      <webwork>
      <setup>
      <pg-code>$yes=PopUp(['?','is', 'is not'],1);
      $no=PopUp(['?','is', 'is not'],2);</pg-code>
      </setup>
      <statement>
        <p permid="Ajv">
          Identify which of the following are polynomials and which are not.

          <ol permid="ZKh" label="a.">
            <li permid="umS">
              <p permid="MER">
                The expression <m>-2x^9-\frac{7}{13}x^3-1</m> <var name="$yes" form="popup"/> a polynomial.
              </p>
            </li>

            <li permid="aub">
              <p permid="sMa">
                The expression <m>5x^{-2}-5x^2+3</m> <var name="$no" form="popup"/> a polynomial.
              </p>
            </li>

            <li permid="GBk">
              <p permid="YTj">
                The expression <m>\sqrt{2}x-\frac{3}{5}</m> <var name="$yes" form="popup"/> a polynomial.
              </p>
            </li>

            <li permid="mIt">
              <p permid="Fas">
                The expression <m>5x^3-5^{-5}x-x^4</m> <var name="$yes" form="popup"/> a polynomial.
              </p>
            </li>

            <li permid="SPC">
              <p permid="lhB">
                The expression <m>\frac{25}{x^2}+23-x</m> <var name="$no" form="popup"/> a polynomial.
              </p>
            </li>

            <li permid="yWL">
              <p permid="RoK">
                The expression <m>37x^6-x+8^{\frac{4}{3}}</m> <var name="$yes" form="popup"/> a polynomial.
              </p>
            </li>

            <li permid="fdU">
              <p permid="xvT">
                The expression <m>\sqrt{7x}-4x^3</m> <var name="$no" form="popup"/> a polynomial.
              </p>
            </li>

            <li permid="Lld">
              <p permid="dDc">
                The expression <m>6x^{\frac{3}{2}}+1</m> <var name="$no" form="popup"/> a polynomial.
              </p>
            </li>

            <li permid="rsm">
              <p permid="JKl">
                The expression <m>6^x-3x^6</m> <var name="$no" form="popup"/> a polynomial.
              </p>
            </li>
          </ol>
        </p>
      </statement>
      <solution permid="XUU">
        <p permid="Ycl">
          <ol permid="cEN" label="a.">
            <li permid="Xzv">
              <p permid="pRu">
                The expression <m>-2x^9-\frac{7}{13}x^3-1</m> is a polynomial.
              </p>
            </li>

            <li permid="DGE">
              <p permid="VYD">
                The expression <m>5x^{-2}-5x^2+3</m> is not a polynomial because it has negative exponents on a variable.
              </p>
            </li>

            <li permid="jNN">
              <p permid="CfM">
                The expression <m>\sqrt{2}x-\frac{3}{5}</m> is a polynomial.
                Note that <em>coefficients</em>
                can have radicals even though variables cannot,
                and the square root here is <em>only</em> applied to the <m>2</m>.
              </p>
            </li>

            <li permid="PUW">
              <p permid="imV">
                The expression <m>5x^3-5^{-5}x-x^4</m> is a polynomial.
                Note that <em>coefficients</em>
                can have negative exponents even though variables cannot.
              </p>
            </li>

            <li permid="wcf">
              <p permid="Oue">
                The expression <m>\frac{25}{x^2}+23-x</m> is not a polynomial because it has a variable in a denominator.
              </p>
            </li>

            <li permid="cjo">
              <p permid="uBn">
                The expression <m>37x^6-x+8^{\frac{4}{3}}</m> is a polynomial.
                Note that <em>coefficients</em>
                can have fractional exponents even though variables cannot.
              </p>
            </li>

            <li permid="Iqx">
              <p permid="aIw">
                The expression <m>\sqrt{7x}-4x^3</m> is not a polynomial because it has a variable inside a radical.
              </p>
            </li>

            <li permid="oxG">
              <p permid="GPF">
                The expression <m>6x^{\frac{3}{2}}+1</m> is not a polynomial because a variable has a fractional exponent.
              </p>
            </li>

            <li permid="UEP">
              <p permid="mWO">
                The expression <m>6^x-3x^6</m> is not a polynomial because it has a variable in an exponent.
              </p>
            </li>
          </ol>
        </p>
      </solution></webwork>
    </exercise>

    <definition permid="UbZ" xml:id="definition-degree">
      <idx>degree</idx>
      <idx><h>polynomial</h><h>degree of a term</h></idx>
      <idx>degree</idx>
      <statement>
        <p permid="ZRy">
          When a term only has one variable,
          its <term>degree</term> is the exponent on that variable.
          When a term has more than on variable,
          its <term>degree</term> is the sum of the exponents on the variables in that term.
          When a term has no variables,
          its <term>degree</term> is <m>0</m>.
        </p>
      </statement>
    </definition>

    <p permid="aBs">
      For example:

      <ul permid="Plc">
        <li permid="kTg">
          <p permid="TdX">
            the degree of <m>5x^2</m> is <m>2</m>;
          </p>
        </li>

        <li permid="Rap">
          <p permid="zlg">
            the degree of <m>-\frac{4}{7}y^5</m> is <m>5</m>.
          </p>
        </li>

        <li permid="xhy">
          <p permid="fsp">
            the degree of <m>-4x^2y^3</m> is <m>5</m>.
          </p>
        </li>
      </ul>
    </p>

    <p permid="GIB">
      Polynomial terms are often classified by their degree.
      In doing so,
      we would refer to <m>5x^2</m> as a second-degree term.
    </p>

    <definition permid="Aji" xml:id="definition-degree-polynomial">
      <statement>
        <p permid="FYH">
          The <term>degree of a polynomial</term><idx><h>polynomial</h><h>degree of a polynomial</h></idx> is the greatest degree that appears amongst its terms.
          If the polynomial is just <m>0</m>,
          it has no terms, and we say its degree is <m>-1</m>.
        </p>
      </statement>
    </definition>

    <definition permid="gqr" xml:id="definition-leading-term">
      <statement>
        <p permid="mfQ">
          The <term>leading term</term><idx><h>polynomial</h><h>leading term</h></idx> of a polynomial is the term with the greatest degree
          (assuming there is one, and there is no tie).
        </p>
      </statement>
    </definition>

    <p permid="mPK">
      For example, the degree of the polynomial
      <m>x^2-5x+3</m> is <m>2</m> because the terms have degrees <m>2</m>,
      <m>1</m>, and <m>0</m>, and <m>2</m> is the largest.
      Its leading term is <m>x^2</m>.
      Polynomials are often classified by their degree,
      and we would say that <m>x^2-5x+3</m> is a second-degree polynomial.
    </p>

    <p permid="SWT">
      The coefficient of a polynomial's leading term is called the polynomial's
      <term>leading coefficient</term>.
          <idx><h>polynomial</h><h>leading coefficient</h></idx>
      For example,
      the leading coefficient of <m>x^2-5x+3</m> is <m>1</m>
      (because <m>x^2=1\cdot x^2</m>).
    </p>

    <definition permid="MxA" xml:id="definition-constant-term">
      <statement>
        <p permid="SmZ">
          A term with no variable factor is called a
          <term>constant term</term>.
              <idx><h>constant term</h></idx>
              <idx><h>polynomial</h><h>constant term of</h></idx>
        </p>
      </statement>
    </definition>

    <p permid="zec">
      For example,
      the constant term of the polynomial <m>x^2-5x+3</m> is <m>3</m>.
    </p>

    <p permid="fll">
      There are some special names for polynomials with certain degrees:

      <ul permid="vsl">
        <li permid="doH">
          <p permid="Lzy">
            A zero-degree polynomial is called a
            <term>constant polynomial</term>
            or simply a <term>constant</term>.
          </p>

          <p permid="rGH">
            An example is the polynomial <m>7</m>,
            which has degree zero because it can be viewed as <m>7x^0</m>.
          </p>
        </li>

        <li permid="JvQ">
          <p permid="XNQ">
            A first-degree polynomial is called a
            <term>linear polynomial</term>.
          </p>

          <p permid="DUZ">
            An example is <m>-2x+7</m>.
          </p>
        </li>

        <li permid="pCZ">
          <p permid="kci">
            A second-degree polynomial is called a
            <term>quadratic polynomial</term>.
          </p>

          <p permid="Qjr">
            An example is <m>4x^2-2x+7</m>.
          </p>
        </li>

        <li permid="VKi">
          <p permid="wqA">
            A third-degree polynomial is called a
            <term>cubic polynomial</term>.
          </p>

          <p permid="cxJ">
            An example is <m>x^3+4x^2-2x+7</m>.
          </p>
        </li>
      </ul>

      Fourth-degree and fifth-degree polynomials are called quartic and quintic polynomials,
      respectively.
      If the degree of the polynomial,
      <m>n</m>, is greater than five,
      we'll simply call it an <m>n</m>th-degree polynomial.
      For example, the polynomial
      <m>5x^8-4x^5+1</m> is an <m>8</m>th-degree polynomial.
    </p>

    <remark xml:id="remark-standard-form">
      <p permid="Lsu">
        To help us recognize a polynomial's degree,
        it is the standard convention to write a polynomial's terms in order from greatest-degree term to lowest-degree term.
        When a polynomial is written in this order,
        it is written in <term>standard form</term>.
        For example,
        it is standard practice to write <m>7-4x-x^2</m> as
        <m>-x^2-4x+7</m> since <m>-x^2</m> is the leading term.
        By writing the polynomial in standard form,
        we can look at the first term to determine both the polynomial's degree and leading term.
      </p>
    </remark>

    <p permid="rzD">
      There are special names for polynomials with a small number of terms:
    </p>

    <definition permid="sEJ" xml:id="definition-monomial-binomial-trinomial">
      <statement>
        <p permid="yui">
          <ul permid="NvP">
            <li permid="BRr">
              <p permid="IES">
                A polynomial with one term,
                such as <m>3x^5</m> or <m>9</m>,
                is called a <term>monomial</term>.
                  <idx><h>monomial</h></idx>
                  <idx><h>polynomial</h><h>monomial</h></idx>
              </p>
            </li>

            <li permid="hYA">
              <p permid="oMb">
                A polynomial with two terms,
                such as <m>3x^5+2x</m> or <m>-2x+1</m>,
                is called a <term>binomial</term>.
                  <idx><h>binomial</h></idx>
                  <idx><h>polynomial</h><h>binomial</h></idx>
              </p>
            </li>

            <li permid="OfJ">
              <p permid="UTk">
                A polynomial with three terms,
                such as <m>x^2-5x+3</m>, is called a <term>trinomial</term>.
                  <idx><h>trinomial</h></idx>
                  <idx><h>polynomial</h><h>trinomial</h></idx>
              </p>
            </li>
          </ul>
        </p>
      </statement>
    </definition>
  </subsection>

  <subsection permid="tKc">
    <title>Adding and Subtracting Polynomials</title>
    <idx><h>polynomial</h><h>addition and subtraction</h></idx>
    <idx><h>addition</h><h>of polynomials</h></idx>

    <example permid="ETb" xml:id="example-ketchup-production-costs">
      <title>Production Costs</title>
      <p permid="eBr">
        Bayani started a company that is devoted to one product: ketchup.
        The company's production costs only involve two components:
        supplies and labor.
        The cost of supplies, <m>S</m>
        (in thousands of dollars),
        can be modeled by <m>S=0.05x^2+2x+30</m>,
        where <m>x</m> is number of thousands of jars of ketchup produced.
        The labor cost for his employees, <m>L</m>
        (in thousands of dollars),
        can be modeled by <m>0.1x^2+4x</m>,
        where <m>x</m> again represents the number of jars they produce
        (in thousands of jars).
        Find a model for the company's total production costs.
      </p>

      <p permid="KIA">
        Since Bayani's company only has these two costs,
        we can find a model for the total production costs, <m>C</m>
        (in thousands of dollars),
        by adding the supply costs and the labor costs:
        <me permid="oEX">
          C=\left(0.05x^2+2x+30\right)+\left(0.1x^2+4x\right)
        </me>
      </p>

      <p permid="qPJ">
        To finish simplifying our total production cost model,
        we'll combine the like terms:
        <md permid="UMg">
          <mrow>C \amp= 0.05x^2+0.1x^2+2x+4x+30</mrow>
          <mrow>\amp= 0.15x^2+6x+30</mrow>
        </md>
        This simplified model can now calculate Bayani's total production costs <m>C</m>
        (in thousands of dollars)
        when the company produces <m>x</m> thousand jars of ketchup.
      </p>
    </example>

    <p permid="XGM">
      In short, the process of adding two or more polynomials involves recognizing and then combining the like terms.
    </p>

    <exercise permid="JCU">
      <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract25.pg" seed="2"/>
    </exercise>
<!--         <example xml:id="example-polyadd1">
        <statement><p>Add <m>\left(5x^3+4x^2-6x\right)</m> and <m>\left(-3x^2+9x-2\right)</m>.</p></statement>
        <solution><p>First identify the like terms and then combine them.<md>
            <mrow>\left(5x^3+4x^2-6x\right)+\left(-3x^2+9x-2\right) \amp= 5x^3+4x^2+(-3x^2)+(-6x)+9x+(-2)</mrow>
            <mrow> \amp= 5x^3+x^2+3x-2</mrow>
        </md></p></solution></example>
 -->
    <example permid="lak" xml:id="example-polyadd2">
      <statement>
        <p permid="WWS">
          Simplify the expression <m>\left(\frac{1}{2}x^2-\frac{2}{3}x-\frac{3}{2}\right)+\left(\frac{3}{2}x^2+\frac{7}{2}x-\frac{1}{4}\right)</m>.
        </p>
      </statement>
      <solution permid="Tlb">
        <p permid="Eju">
          <md permid="ATp">
            <mrow>\amp\left(\frac{1}{2}x^2-\frac{2}{3}x-\frac{3}{2}\right)+\left(\frac{3}{2}x^2+\frac{7}{2}x-\frac{1}{4}\right)</mrow>
            <mrow>\amp=\left(\frac{1}{2}x^2+\frac{3}{2}x^2\right)+\left(\left(-\frac{2}{3}x\right)+\frac{7}{2}x\right)+\left(\left(-\frac{3}{2}\right)+\left(-\frac{1}{4}\right)\right)</mrow>
            <mrow>\amp= \left(\frac{4}{2}x^2\right)+\left(\left(-\frac{4}{6}x\right)+\frac{21}{6}x\right)+\left(\left(-\frac{6}{4}\right)+\left(-\frac{1}{4}\right)\right)</mrow>
            <mrow>\amp= \left(2x^2\right)+\left(\frac{17}{6}x\right)+\left(-\frac{7}{4}\right)</mrow>
            <mrow>\amp=2x^2 +\frac{17}{6}x-\frac{7}{4}</mrow>
          </md>
        </p>
      </solution>
    </example>

    <example permid="Rht" xml:id="example-profit-revenue-and-costs">
      <title>Profit, Revenue, and Costs</title>
      <p permid="Deb">
        From <xref ref="example-ketchup-production-costs">Example</xref>,
        we know Bayani's ketchup company's production costs, <m>C</m>
        (in thousands of dollars),
        for producing <m>x</m> thousand jars of ketchup is modeled by <m>C=0.15x^2+6x+30</m>.
        The revenue, <m>R</m>
        (in thousands of dollars),
        from selling the ketchup can be modeled by <m>R=13x</m>,
        where <m>x</m> stands for the number of thousands of jars of ketchup sold.
        The company's net profit can be calculated using the concept:
        <me permid="hay">
          \text{net profit} = \text{revenue}  -  \text{costs}
        </me>
        Assuming all products produced will be sold,
        a polynomial to model the company's net profit, <m>P</m>
        (in thousands of dollars)
        is:
        <md permid="NhH">
          <mrow>P \amp= R-C</mrow>
          <mrow>\amp= \left(13x\right)-\left(0.15x^2+6x+30\right)</mrow>
          <mrow>\amp= 13x-0.15x^2-6x-30</mrow>
          <mrow>\amp= -0.15x^2+\left(13x+(-6x)\right)-30</mrow>
          <mrow>\amp=-0.15x^2+7x-30</mrow>
        </md>
      </p>
    </example>

    <p permid="DNV">
      The key distinction between the addition and subtraction of polynomials is that when we subtract a polynomial,
      we must subtract each term in that polynomial.
    </p>

    <remark>
      <p permid="jVe">
        Notice that our first step in simplifying the expression in <xref ref="example-profit-revenue-and-costs">Example</xref>
        was to subtract <em>every</em>
        term in the second expression.
        We can also think of this as distributing a factor of <m>-1</m> across the second polynomial,
        <m>0.15x^2+6x+30</m>, and then adding these terms as follows:
        <md permid="toQ">
          <mrow>P \amp= R-C</mrow>
          <mrow>\amp= \left(13x\right)-\left(0.15x^2+6x+30\right)</mrow>
          <mrow>\amp= 13x+(-1)(0.15x^2)+(-1)(6x)+(-1)(30)</mrow>
          <mrow>\amp= 13x-0.15x^2-6x-30</mrow>
          <mrow>\amp= -0.15x^2+\left(13x+(-6x)\right)-30</mrow>
          <mrow>\amp=-0.15x^2+7x-30</mrow>
        </md>
      </p>
    </remark>

    <example permid="xoC" xml:id="example-poysub1">
      <statement>
        <p permid="jlk">
          Subtract <m>\left(5x^3+4x^2-6x\right)-\left(-3x^2+9x-2\right)</m>.
        </p>
      </statement>
      <solution permid="zsk">
        <p permid="kqD">
          We must first subtract every term in
          <m>\left(-3x^2+9x-2\right)</m> from <m>\left(5x^3+4x^2-6x\right)</m>.
          Then we can combine like terms.
          <md permid="ZvZ">
            <mrow>\amp\left(5x^3+4x^2-6x\right)-\left(-3x^2+9x-2\right)</mrow>
            <mrow>\amp= 5x^3+4x^2-6x \highlight{{}+{}} 3x^2 \highlight{{}-{}} 9x \highlight{{}+{}} 2</mrow>
            <mrow>\amp= 5x^3+\left(4x^2+3x^2\right)+\left(-6x+(-9x)\right)+2</mrow>
            <mrow>\amp= 5x^3+7x^2-15x+2</mrow>
          </md>
        </p>
      </solution>
    </example>

    <exercise permid="pKd">
      <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract90.pg" seed="3"/>
    </exercise>

    <p permid="Qcn">
      Let's look at one more example involving multiple variables.
      Remember that like terms must have the same variable(s) with the same exponent.
    </p>

    <example permid="dvL" xml:id="example-polysub2">
      <statement>
        <p permid="Pst">
          Subtract <m>\left( 3x^2y+8xy^2-17y^3 \right)-\left(2x^2y+11xy^2+4y^2 \right)</m>.
        </p>
      </statement>
      <solution permid="fzt">
        <p permid="QxM">
          Again, we'll begin by subtracting each term in <m>\left(2x^2y+11xy^2+4y^2\right)</m>.
          Once we've done this, we'll need to identify and combine like terms.
          <md permid="FDi">
            <mrow>\amp\left( 3x^2y+8xy^2-17y^3 \right)-\left(2x^2y+11xy^2+4y^2\right)</mrow>
            <mrow>\amp=
            3x^2y+8xy^2-17y^3 \highlight{{}-{}} 2x^2y \highlight{{}-{}} 11xy^2 \highlight{{}-{}} 4y^2</mrow>
            <mrow>\amp=\left(3x^2y+\left(-2x^2y\right)\right)+\left(8xy^2+\left(-11xy^2\right)\right)+\left(-17y^3\right)+\left(-4y^2\right)</mrow>
            <mrow>\amp= x^2y-3xy^2-17y^3-4y^2</mrow>
          </md>
        </p>
      </solution>
    </example>
  </subsection>

  <subsection permid="ZRl">
    <title>Evaluating Polynomial Expressions</title>
    <p permid="wjw">
      Evaluating expressions was introduced in <xref ref="section-variables-and-evaluating-expressions">Section</xref>,
      and involves replacing the variable(s) in an expression with specific numbers and calculating the result.
      Here, we will look at evaluating polynomial expressions.
    </p>

    <example permid="VRm">
      <statement>
        <p permid="vzC">
          Evaluate the expression <m>-12y^3+4y^2-9y+2</m> for <m>y=-5</m>.
        </p>
      </statement>
      <solution permid="LGC">
        <p permid="wEV">
          We will replace <m>y</m> with <m>-5</m> and simplify the result:
          <md permid="lKr">
            <mrow>-12y^3+4y^2-9y+2 \amp= -12(\substitute{-5})^3+4(\substitute{-5})^2-9(\substitute{-5})+2</mrow>
            <mrow>\amp= -12(-125)+4(25)+45+2</mrow>
            <mrow>\amp= 1647</mrow>
          </md>
        </p>
      </solution>
    </example>

    <remark>
      <p permid="cqF">
        Recall that <m>(-5)^2</m> and <m>-5^2</m> are not the same expressions.
        The first expression, <m>(-5)^2</m>,
        represents the number <m>-5</m> squared,
        and is <m>(-5)(-5)=25</m>.
        The second expression, <m>-5^2</m>,
        is the <em>opposite</em> of the number <m>5</m> squared,
        and is <m>-5^2=-(5\cdot 5) = -25</m>.
      </p>
    </remark>

    <example permid="BYv">
      <statement>
        <p permid="bGL">
          Evaluate the expression <m>C=0.15x^2+6x+30</m> from <xref ref="example-ketchup-production-costs">Example</xref>
          for <m>x=10</m> and explain what this means in context.
        </p>
      </statement>
      <solution permid="rNL">
        <p permid="cMe">
          We will replace <m>x</m> with <m>10</m>:
          <md permid="RRA">
            <mrow>C\amp=0.15x^2+6x+30</mrow>
            <mrow>\amp=0.15(\substitute{10})^2+6(\substitute{10})+30</mrow>
            <mrow>\amp=105</mrow>
          </md>
          In context, we can interpret this as it costing
          <m>\$105{,}000</m> to produce <m>10{,}000</m> jars of ketchup.
        </p>
      </solution>
    </example>

    <exercise permid="ifE">
      <webwork source="BasicAlgebra/EvaluateExpressions/evaluate150.pg" seed="3"/>
    </exercise>
  </subsection>

  <exercises permid="FYu">
    <exercisegroup permid="mfD" cols="2">
      <title>Review and Warmup</title>
      <exercise permid="OmN">
        <webwork>
        <setup>
        <pg-code>Context("Numeric");
        Context()->noreduce('(-x)+y','(-x)-y');
        Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
        @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
        for $i (0..3) {
        $expression[$i] = Formula("0");
        $answers[$i] = List();
        my @vars;
        my @exps;
        for $j (1..$termcount[$i]) {
        my $nextvar = list_random('x','y','z','t','s');
        my $nextexp;
        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
        push(@vars,$nextvar);
        push(@exps,$nextexp);
        $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
        $answers[$i] = List($answers[$i]->value,Formula("$string")->reduce->reduce);
        }
        }
        $exp0=$expression[0];
        $exp1=$expression[1];
        $exp2=$expression[2];
        $exp3=$expression[3];</pg-code>
        </setup>
        <statement>
          <p permid="gqE">
            List the terms in each expression.

            <ol permid="FRq" label="a.">
              <li permid="ALY">
                <p permid="Bat">
                  <m><var name="$exp0" /></m>
                </p>

                <p permid="hhC">
                  <var name="$answers[0]" width="25" />
                </p>
              </li>

              <li permid="gTh">
                <p permid="NoL">
                  <m><var name="$exp1" /></m>
                </p>

                <p permid="tvU">
                  <var name="$answers[1]" width="25" />
                </p>
              </li>

              <li permid="Naq">
                <p permid="ZDd">
                  <m><var name="$exp2" /></m>
                </p>

                <p permid="FKm">
                  <var name="$answers[2]" width="25" />
                </p>
              </li>

              <li permid="thz">
                <p permid="lRv">
                  <m><var name="$exp3" /></m>
                </p>

                <p permid="RYE">
                  <var name="$answers[3]" width="25" />
                </p>
              </li>
            </ol>
          </p>
        </statement>
        <solution permid="Ecd">
          <p permid="ITn">
            <ol permid="ILW" label="a.">
              <li permid="ZoI">
                <p permid="yfN">
                  The terms are <m><var name="$answers[0]" /></m>.
                </p>
              </li>

              <li permid="FvR">
                <p permid="emW">
                  The terms are <m><var name="$answers[1]" /></m>.
                </p>
              </li>

              <li permid="lDa">
                <p permid="Kuf">
                  The terms are <m><var name="$answers[2]" /></m>.
                </p>
              </li>

              <li permid="RKj">
                <p permid="qBo">
                  The terms are <m><var name="$answers[3]" /></m>.
                </p>
              </li>
            </ol>
          </p>
        </solution></webwork>
      </exercise>

      <exercise permid="utW">
        <webwork>
        <setup>
        <pg-code>Context("Numeric");
        Context()->noreduce('(-x)+y','(-x)-y');
        Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
        @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
        for $i (0..3) {
        $expression[$i] = Formula("0");
        $answers[$i] = List();
        my @vars;
        my @exps;
        for $j (1..$termcount[$i]) {
        my $nextvar = list_random('x','y','z','t','s');
        my $nextexp;
        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
        push(@vars,$nextvar);
        push(@exps,$nextexp);
        $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
        $answers[$i] = List($answers[$i]->value,Formula("$string")->reduce->reduce);
        }
        }
        $exp0=$expression[0];
        $exp1=$expression[1];
        $exp2=$expression[2];
        $exp3=$expression[3];</pg-code>
        </setup>
        <statement>
          <p permid="MxN">
            List the terms in each expression.

            <ol permid="lYz" label="a.">
              <li permid="xRs">
                <p permid="WIx">
                  <m><var name="$exp0" /></m>
                </p>

                <p permid="CPG">
                  <var name="$answers[0]" width="25" />
                </p>
              </li>

              <li permid="dYB">
                <p permid="iWP">
                  <m><var name="$exp1" /></m>
                </p>

                <p permid="PdY">
                  <var name="$answers[1]" width="25" />
                </p>
              </li>

              <li permid="KfK">
                <p permid="vlh">
                  <m><var name="$exp2" /></m>
                </p>

                <p permid="bsq">
                  <var name="$answers[2]" width="25" />
                </p>
              </li>

              <li permid="qmT">
                <p permid="Hzz">
                  <m><var name="$exp3" /></m>
                </p>

                <p permid="nGI">
                  <var name="$answers[3]" width="25" />
                </p>
              </li>
            </ol>
          </p>
        </statement>
        <solution permid="kjm">
          <p permid="paw">
            <ol permid="oTf" label="a.">
              <li permid="Wuc">
                <p permid="TNR">
                  The terms are <m><var name="$answers[0]" /></m>.
                </p>
              </li>

              <li permid="CBl">
                <p permid="zVa">
                  The terms are <m><var name="$answers[1]" /></m>.
                </p>
              </li>

              <li permid="iIu">
                <p permid="gcj">
                  The terms are <m><var name="$answers[2]" /></m>.
                </p>
              </li>

              <li permid="OPD">
                <p permid="Mjs">
                  The terms are <m><var name="$answers[3]" /></m>.
                </p>
              </li>
            </ol>
          </p>
        </solution></webwork>
      </exercise>

      <exercise permid="aBf">
        <webwork>
        <setup>
        <pg-code>Context("Numeric");
        Context()->noreduce('(-x)+y','(-x)-y');
        Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
        @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
        for $i (0..3) {
        $expression[$i] = Formula("0");
        $answers[$i] = List();
        my @vars;
        my @exps;
        for $j (1..$termcount[$i]) {
        my $nextvar = list_random('x','y','z','t','s');
        my $nextexp;
        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
        push(@vars,$nextvar);
        push(@exps,$nextexp);
        $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
        $answers[$i] = List($answers[$i]->value,Formula("$string")->reduce->reduce);
        }
        }
        $exp0=$expression[0];
        $exp1=$expression[1];
        $exp2=$expression[2];
        $exp3=$expression[3];</pg-code>
        </setup>
        <statement>
          <p permid="sEW">
            List the terms in each expression.

            <ol permid="SfI" label="a.">
              <li permid="uWM">
                <p permid="sqB">
                  <m><var name="$exp0" /></m>
                </p>

                <p permid="YxK">
                  <var name="$answers[0]" width="25" />
                </p>
              </li>

              <li permid="bdV">
                <p permid="EET">
                  <m><var name="$exp1" /></m>
                </p>

                <p permid="kMc">
                  <var name="$answers[1]" width="25" />
                </p>
              </li>

              <li permid="Hle">
                <p permid="QTl">
                  <m><var name="$exp2" /></m>
                </p>

                <p permid="xau">
                  <var name="$answers[2]" width="25" />
                </p>
              </li>

              <li permid="nsn">
                <p permid="dhD">
                  <m><var name="$exp3" /></m>
                </p>

                <p permid="JoM">
                  <var name="$answers[3]" width="25" />
                </p>
              </li>
            </ol>
          </p>
        </statement>
        <solution permid="Qqv">
          <p permid="VhF">
            <ol permid="Vao" label="a.">
              <li permid="Tzw">
                <p permid="pvV">
                  The terms are <m><var name="$answers[0]" /></m>.
                </p>
              </li>

              <li permid="zGF">
                <p permid="VDe">
                  The terms are <m><var name="$answers[1]" /></m>.
                </p>
              </li>

              <li permid="fNO">
                <p permid="BKn">
                  The terms are <m><var name="$answers[2]" /></m>.
                </p>
              </li>

              <li permid="LUX">
                <p permid="hRw">
                  The terms are <m><var name="$answers[3]" /></m>.
                </p>
              </li>
            </ol>
          </p>
        </solution></webwork>
      </exercise>

      <exercise permid="GIo">
        <webwork>
        <setup>
        <pg-code>Context("Numeric");
        Context()->noreduce('(-x)+y','(-x)-y');
        Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
        @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
        for $i (0..3) {
        $expression[$i] = Formula("0");
        $answers[$i] = List();
        my @vars;
        my @exps;
        for $j (1..$termcount[$i]) {
        my $nextvar = list_random('x','y','z','t','s');
        my $nextexp;
        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
        push(@vars,$nextvar);
        push(@exps,$nextexp);
        $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
        $answers[$i] = List($answers[$i]->value,Formula("$string")->reduce->reduce);
        }
        }
        $exp0=$expression[0];
        $exp1=$expression[1];
        $exp2=$expression[2];
        $exp3=$expression[3];</pg-code>
        </setup>
        <statement>
          <p permid="YMf">
            List the terms in each expression.

            <ol permid="ymR" label="a.">
              <li permid="scg">
                <p permid="NYF">
                  <m><var name="$exp0" /></m>
                </p>

                <p permid="ufO">
                  <var name="$answers[0]" width="25" />
                </p>
              </li>

              <li permid="Yjp">
                <p permid="amX">
                  <m><var name="$exp1" /></m>
                </p>

                <p permid="Gug">
                  <var name="$answers[1]" width="25" />
                </p>
              </li>

              <li permid="Eqy">
                <p permid="mBp">
                  <m><var name="$exp2" /></m>
                </p>

                <p permid="SIy">
                  <var name="$answers[2]" width="25" />
                </p>
              </li>

              <li permid="kxH">
                <p permid="yPH">
                  <m><var name="$exp3" /></m>
                </p>

                <p permid="eWQ">
                  <var name="$answers[3]" width="25" />
                </p>
              </li>
            </ol>
          </p>
        </statement>
        <solution permid="wxE">
          <p permid="BoO">
            <ol permid="Bhx" label="a.">
              <li permid="QEQ">
                <p permid="LdZ">
                  The terms are <m><var name="$answers[0]" /></m>.
                </p>
              </li>

              <li permid="wLZ">
                <p permid="rli">
                  The terms are <m><var name="$answers[1]" /></m>.
                </p>
              </li>

              <li permid="cTi">
                <p permid="Xsr">
                  The terms are <m><var name="$answers[2]" /></m>.
                </p>
              </li>

              <li permid="Jar">
                <p permid="DzA">
                  The terms are <m><var name="$answers[3]" /></m>.
                </p>
              </li>
            </ol>
          </p>
        </solution></webwork>
      </exercise>

    </exercisegroup>
    <exercisegroup permid="SmM" cols="2">

      <exercise permid="mPx">
        <webwork>
        <setup>
        <pg-code>Context("Numeric");
        Context()->noreduce('(-x)+y','(-x)-y');
        Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
        Context()->operators->set(
        '+' => {class => 'bizarro::BOP::add', isCommand => 1},
        '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
        );
        @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
        for $i (0..3) {
        $expression[$i] = Formula("0");
        my @vars;
        my @exps;
        for $j (1..$termcount[$i]) {
        my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
        my $nextexp;
        do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
        push(@vars,$nextvar);
        push(@exps,$nextexp);
        $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
        $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
        }
        }
        $exp0=$expression[0];
        $exp1=$expression[1];
        $exp2=$expression[2];
        $exp3=$expression[3];
        for $i (0..3) {
        $answers[$i] = Formula($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'+'.
        $expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'x+'.
        $expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'y+'.
        $expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'z+'.
        $expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'s+'.
        $expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'t+'.
        $expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2x^2+'.
        $expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2y^2+'.
        $expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2z^2+'.
        $expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2s^2+'.
        $expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2t^2')->reduce->reduce;
        $evaluator[$i] = $answers[$i] -> cmp(
        checker=>sub{
        my ( $correct, $student, $ansHash ) = @_;
        return 0 if $ansHash->{isPreview} || $correct != $student;
        $student = $ansHash->{student_formula};
        $correct = $correct->{original_formula} if defined $correct->{original_formula};
        $student = Formula("$student"); $correct = Formula("$correct");
        return 0 unless ($correct == $student);
        Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
        delete $correct->{test_values}, $student->{test_values};
        my $OK = (($correct == $student) or ($student == $correct));
        Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
        Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
        return $OK;
        });
        }</pg-code>
        </setup>
        <statement>
          <p permid="ETo">
            Simplify each expression, if possible, by combining like terms.
          </p>

          <instruction>If the expression cannot be simplified further, just enter it as it is.</instruction>

          <p permid="lax">
            <ol permid="eua" label="a.">
              <li permid="phA">
                <p permid="jGJ">
                  <m><var name="$exp0" /></m>
                </p>

                <p permid="PNS">
                  <var name="$evaluator[0]" width="25" />
                </p>
              </li>

              <li permid="VoJ">
                <p permid="vVb">
                  <m><var name="$exp1" /></m>
                </p>

                <p permid="cck">
                  <var name="$evaluator[1]" width="25" />
                </p>
              </li>

              <li permid="BvS">
                <p permid="Ijt">
                  <m><var name="$exp2" /></m>
                </p>

                <p permid="oqC">
                  <var name="$evaluator[2]" width="25" />
                </p>
              </li>

              <li permid="hDb">
                <p permid="UxL">
                  <m><var name="$exp3" /></m>
                </p>

                <p permid="AEU">
                  <var name="$evaluator[3]" width="25" />
                </p>
              </li>
            </ol>
          </p>
        </statement></webwork>
      </exercise>

      <exercise permid="SWG">
        <webwork>
        <setup>
        <pg-code>Context("Numeric");
        Context()->noreduce('(-x)+y','(-x)-y');
        Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
        Context()->operators->set(
        '+' => {class => 'bizarro::BOP::add', isCommand => 1},
        '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
        );
        @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
        for $i (0..3) {
        $expression[$i] = Formula("0");
        my @vars;
        my @exps;
        for $j (1..$termcount[$i]) {
        my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
        my $nextexp;
        do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
        push(@vars,$nextvar);
        push(@exps,$nextexp);
        $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
        $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
        }
        }
        $exp0=$expression[0];
        $exp1=$expression[1];
        $exp2=$expression[2];
        $exp3=$expression[3];
        for $i (0..3) {
        $answers[$i] = Formula($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'+'.
        $expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'x+'.
        $expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'y+'.
        $expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'z+'.
        $expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'s+'.
        $expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'t+'.
        $expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2x^2+'.
        $expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2y^2+'.
        $expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2z^2+'.
        $expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2s^2+'.
        $expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2t^2')->reduce->reduce;
        $evaluator[$i] = $answers[$i] -> cmp(
        checker=>sub{
        my ( $correct, $student, $ansHash ) = @_;
        return 0 if $ansHash->{isPreview} || $correct != $student;
        $student = $ansHash->{student_formula};
        $correct = $correct->{original_formula} if defined $correct->{original_formula};
        $student = Formula("$student"); $correct = Formula("$correct");
        return 0 unless ($correct == $student);
        Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
        delete $correct->{test_values}, $student->{test_values};
        my $OK = (($correct == $student) or ($student == $correct));
        Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
        Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
        return $OK;
        });
        }</pg-code>
        </setup>
        <statement>
          <p permid="RhG">
            Simplify each expression, if possible, by combining like terms.
          </p>

          <instruction>If the expression cannot be simplified further, just enter it as it is.</instruction>

          <p permid="xoP">
            <ol permid="KBj" label="a.">
              <li permid="NKk">
                <p permid="gMd">
                  <m><var name="$exp0" /></m>
                </p>

                <p permid="MTm">
                  <var name="$evaluator[0]" width="25" />
                </p>
              </li>

              <li permid="tRt">
                <p permid="tav">
                  <m><var name="$exp1" /></m>
                </p>

                <p permid="ZhE">
                  <var name="$evaluator[1]" width="25" />
                </p>
              </li>

              <li permid="ZYC">
                <p permid="FoN">
                  <m><var name="$exp2" /></m>
                </p>

                <p permid="lvW">
                  <var name="$evaluator[2]" width="25" />
                </p>
              </li>

              <li permid="GfL">
                <p permid="RDf">
                  <m><var name="$exp3" /></m>
                </p>

                <p permid="xKo">
                  <var name="$evaluator[3]" width="25" />
                </p>
              </li>
            </ol>
          </p>
        </statement></webwork>
      </exercise>

      <exercise permid="zdP">
        <webwork>
        <setup>
        <pg-code>Context("Fraction");
        Context()->noreduce('(-x)+y','(-x)-y');
        Context()->flags->set(reduceConstants=>0);
        Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
        Context()->operators->set(
        '+' => {class => 'bizarro::BOP::add', isCommand => 1},
        '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
        );
        @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
        for $i (0..3) {
        $expression[$i] = Formula("0");
        my @vars;
        my @exps;
        for $j (1..$termcount[$i]) {
        my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
        my $nextexp;
        do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
        push(@vars,$nextvar);
        push(@exps,$nextexp);
        $string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
        $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
        }
        }
        $exp0=$expression[0];
        $exp1=$expression[1];
        $exp2=$expression[2];
        $exp3=$expression[3];
        for $i (0..3) {
        $answers[$i] = Formula(Fraction($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'+'.
        Fraction($expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'x+'.
        Fraction($expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'y+'.
        Fraction($expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'z+'.
        Fraction($expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'s+'.
        Fraction($expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'t+'.
        Fraction($expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2x^2+'.
        Fraction($expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2y^2+'.
        Fraction($expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2z^2+'.
        Fraction($expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2s^2+'.
        Fraction($expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2t^2')->reduce->reduce;
        $evaluator[$i] = $answers[$i] -> cmp(
        checker=>sub{
        my ( $correct, $student, $ansHash ) = @_;
        return 0 if $ansHash->{isPreview} || $correct != $student;
        $student = $ansHash->{student_formula};
        $correct = $correct->{original_formula} if defined $correct->{original_formula};
        $student = Formula("$student"); $correct = Formula("$correct");
        return 0 unless ($correct == $student);
        Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
        delete $correct->{test_values}, $student->{test_values};
        my $OK = (($correct == $student) or ($student == $correct));
        Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
        Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
        return $OK;
        });
        }</pg-code>
        </setup>
        <statement>
          <p permid="dvY">
            Simplify each expression, if possible, by combining like terms.
          </p>

          <instruction>If the expression cannot be simplified further, just enter it as it is.</instruction>

          <p permid="JDh">
            <ol permid="qIs" label="a.">
              <li permid="mmU">
                <p permid="dRx">
                  <m><var name="$exp0" /></m>
                </p>

                <p permid="JYG">
                  <var name="$evaluator[0]" width="25" />
                </p>
              </li>

              <li permid="Sud">
                <p permid="qfP">
                  <m><var name="$exp1" /></m>
                </p>

                <p permid="WmY">
                  <var name="$evaluator[1]" width="25" />
                </p>
              </li>

              <li permid="yBm">
                <p permid="Cuh">
                  <m><var name="$exp2" /></m>
                </p>

                <p permid="iBq">
                  <var name="$evaluator[2]" width="25" />
                </p>
              </li>

              <li permid="eIv">
                <p permid="OIz">
                  <m><var name="$exp3" /></m>
                </p>

                <p permid="uPI">
                  <var name="$evaluator[3]" width="25" />
                </p>
              </li>
            </ol>
          </p>
        </statement></webwork>
      </exercise>

      <exercise permid="fkY">
        <webwork>
        <setup>
        <pg-code>Context("Fraction");
        Context()->noreduce('(-x)+y','(-x)-y');
        Context()->flags->set(reduceConstants=>0);
        Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
        Context()->operators->set(
        '+' => {class => 'bizarro::BOP::add', isCommand => 1},
        '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
        );
        @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
        for $i (0..3) {
        $expression[$i] = Formula("0");
        my @vars;
        my @exps;
        for $j (1..$termcount[$i]) {
        my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
        my $nextexp;
        do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
        push(@vars,$nextvar);
        push(@exps,$nextexp);
        $string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
        $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
        }
        }
        $exp0=$expression[0];
        $exp1=$expression[1];
        $exp2=$expression[2];
        $exp3=$expression[3];
        for $i (0..3) {
        $answers[$i] = Formula(Fraction($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'+'.
        Fraction($expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'x+'.
        Fraction($expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'y+'.
        Fraction($expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'z+'.
        Fraction($expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'s+'.
        Fraction($expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'t+'.
        Fraction($expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2x^2+'.
        Fraction($expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2y^2+'.
        Fraction($expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2z^2+'.
        Fraction($expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2s^2+'.
        Fraction($expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2t^2')->reduce->reduce;
        $evaluator[$i] = $answers[$i] -> cmp(
        checker=>sub{
        my ( $correct, $student, $ansHash ) = @_;
        return 0 if $ansHash->{isPreview} || $correct != $student;
        $student = $ansHash->{student_formula};
        $correct = $correct->{original_formula} if defined $correct->{original_formula};
        $student = Formula("$student"); $correct = Formula("$correct");
        return 0 unless ($correct == $student);
        Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
        delete $correct->{test_values}, $student->{test_values};
        my $OK = (($correct == $student) or ($student == $correct));
        Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
        Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
        return $OK;
        });
        }</pg-code>
        </setup>
        <statement>
          <p permid="pKq">
            Simplify each expression, if possible, by combining like terms.
          </p>

          <instruction>If the expression cannot be simplified further, just enter it as it is.</instruction>

          <p permid="VRz">
            <ol permid="WPB" label="a.">
              <li permid="KPE">
                <p permid="aWR">
                  <m><var name="$exp0" /></m>
                </p>

                <p permid="Hea">
                  <var name="$evaluator[0]" width="25" />
                </p>
              </li>

              <li permid="qWN">
                <p permid="nlj">
                  <m><var name="$exp1" /></m>
                </p>

                <p permid="Tss">
                  <var name="$evaluator[1]" width="25" />
                </p>
              </li>

              <li permid="XdW">
                <p permid="zzB">
                  <m><var name="$exp2" /></m>
                </p>

                <p permid="fGK">
                  <var name="$evaluator[2]" width="25" />
                </p>
              </li>

              <li permid="Dlf">
                <p permid="LNT">
                  <m><var name="$exp3" /></m>
                </p>

                <p permid="rVc">
                  <var name="$evaluator[3]" width="25" />
                </p>
              </li>
            </ol>
          </p>
        </statement></webwork>
      </exercise>

    </exercisegroup>
    <exercisegroup permid="ytV" cols="2">
      <title>Vocabulary Questions</title>
      <exercise permid="Lsh">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract0.pg" />
      </exercise>

      <exercise permid="rzq">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract0.pg" />
      </exercise>

      <exercise permid="XGz">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract5.pg" />
      </exercise>

      <exercise permid="DNI">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract5.pg" />
      </exercise>
            <!-- seed set to give distinct degrees -->
      <exercise permid="jUR">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract10.pg" seed="725"/>
      </exercise>

      <exercise permid="Qca">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract10.pg" seed="728"/>
      </exercise>

      <exercise permid="wjj">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract11.pg" />
      </exercise>

      <exercise permid="cqs">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract11.pg" />
      </exercise>

      <exercise permid="IxB">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract15.pg" />
      </exercise>

      <exercise permid="oEK">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract15.pg" />
      </exercise>

    </exercisegroup>
    <exercisegroup permid="eBe" cols="2">

      <exercise permid="ULT">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar10.pg" />
      </exercise>

      <exercise permid="ATc">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar10.pg" />
      </exercise>

    </exercisegroup>
    <exercisegroup permid="KIn" cols="2">
      <title>Simplifying Polynomials</title>
      <exercise permid="hal">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract20.pg" />
      </exercise>

      <exercise permid="Nhu">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract20.pg" />
      </exercise>

      <exercise permid="toD">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract25.pg" />
      </exercise>

      <exercise permid="ZvM">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract25.pg" />
      </exercise>

      <exercise permid="FCV">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract35.pg" />
      </exercise>

      <exercise permid="lKe">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract35.pg" />
      </exercise>

      <exercise permid="RRn">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract40.pg" />
      </exercise>

      <exercise permid="xYw">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract40.pg" />
      </exercise>

      <exercise permid="efF">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract45.pg" />
      </exercise>

      <exercise permid="KmO">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract45.pg" />
      </exercise>

      <exercise permid="qtX" width="wide">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract50.pg" />
      </exercise>

      <exercise permid="WBg" width="wide">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract50.pg" />
      </exercise>

      <exercise permid="CIp">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract55.pg" />
      </exercise>

      <exercise permid="iPy">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract55.pg" />
      </exercise>

    </exercisegroup>
    <exercisegroup permid="qPw" cols="2">

      <exercise permid="OWH">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract80.pg" />
      </exercise>

      <exercise permid="vdQ">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract80.pg" />
      </exercise>

      <exercise permid="bkZ">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract85.pg" />
      </exercise>

      <exercise permid="Hsi">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract85.pg" />
      </exercise>

      <exercise permid="nzr">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract90.pg" />
      </exercise>

      <exercise permid="TGA">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract90.pg" />
      </exercise>

      <exercise permid="zNJ">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract95.pg" />
      </exercise>

      <exercise permid="fUS">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract95.pg" />
      </exercise>

      <exercise permid="Mcb">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract100.pg" />
      </exercise>

      <exercise permid="sjk">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract100.pg" />
      </exercise>

      <exercise permid="Yqt">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract105.pg" />
      </exercise>

      <exercise permid="ExC">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract105.pg" />
      </exercise>

    </exercisegroup>
    <exercisegroup permid="WWF" cols="2">

      <exercise permid="kEL" width="wide">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract130.pg" />
      </exercise>

      <exercise permid="QLU" width="wide">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract130.pg" />
      </exercise>

      <exercise permid="wTd" width="wide">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract135.pg" />
      </exercise>

      <exercise permid="dam" width="wide">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract135.pg" />
      </exercise>

      <exercise permid="Jhv">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar15.pg" />
      </exercise>

      <exercise permid="poE">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar15.pg" />
      </exercise>

      <exercise permid="VvN">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar20.pg" />
      </exercise>

      <exercise permid="BCW">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar20.pg" />
      </exercise>

      <exercise permid="hKf" width="wide">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar25.pg" />
      </exercise>

      <exercise permid="NRo" width="wide">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar25.pg" />
      </exercise>

      <exercise permid="tYx">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar30.pg" />
      </exercise>

      <exercise permid="afG">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar30.pg" />
      </exercise>

      <exercise permid="GmP" width="wide">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar35.pg" />
      </exercise>

      <exercise permid="mtY" width="wide">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar35.pg" />
      </exercise>

      <exercise permid="SBh">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar40.pg" />
      </exercise>

      <exercise permid="yIq">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar40.pg" />
      </exercise>

    </exercisegroup>
    <exercisegroup permid="DdO">

      <exercise permid="ePz">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract140.pg" />
      </exercise>

      <exercise permid="KWI">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract140.pg" />
      </exercise>

      <exercise permid="rdR">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar55.pg" />
      </exercise>

      <exercise permid="Xla">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar55.pg" />
      </exercise>

    </exercisegroup>
    <exercisegroup permid="jkX" cols="2">
      <title>Evaluating Polynomials</title>
      <exercise permid="Dsj">
        <webwork source="BasicAlgebra/EvaluateExpressions/evaluate100.pg" />
      </exercise>

      <exercise permid="jzs">
        <webwork source="BasicAlgebra/EvaluateExpressions/evaluate100.pg" />
      </exercise>

      <exercise permid="PGB">
        <webwork source="BasicAlgebra/EvaluateExpressions/evaluate110.pg" />
      </exercise>

      <exercise permid="vNK">
        <webwork source="BasicAlgebra/EvaluateExpressions/evaluate110.pg" />
      </exercise>

      <exercise permid="bUT">
        <webwork source="BasicAlgebra/EvaluateExpressions/evaluate120.pg" />
      </exercise>

      <exercise permid="Icc">
        <webwork source="BasicAlgebra/EvaluateExpressions/evaluate120.pg" />
      </exercise>

      <exercise permid="ojl">
        <webwork source="BasicAlgebra/EvaluateExpressions/evaluate150.pg" />
      </exercise>

      <exercise permid="Uqu">
        <webwork source="BasicAlgebra/EvaluateExpressions/evaluate150.pg" />
      </exercise>

      <exercise permid="AxD">
        <webwork source="Library/FortLewis/Algebra/1-1-Expressions/MCH1-1-1-04-Expressions.pg" />
      </exercise>

      <exercise permid="gEM">
        <webwork source="Library/FortLewis/Algebra/1-1-Expressions/MCH1-1-1-04-Expressions.pg" />
      </exercise>

      <exercise permid="MLV">
        <webwork source="Library/FortLewis/Algebra/1-1-Expressions/MCH1-1-1-04-Expressions.pg" />
      </exercise>

      <exercise permid="sTe">
        <webwork source="Library/FortLewis/Algebra/1-1-Expressions/MCH1-1-1-04-Expressions.pg" />
      </exercise>

      <exercise permid="Zan">
        <webwork source="Library/FortLewis/Algebra/1-1-Expressions/MCH1-1-1-02-Expressions.pg" />
      </exercise>

      <exercise permid="Fhw">
        <webwork source="Library/FortLewis/Algebra/1-1-Expressions/MCH1-1-1-02-Expressions.pg" />
      </exercise>

      <exercise permid="loF">
        <webwork source="Library/FortLewis/Algebra/1-1-Expressions/MCH1-1-1-02-Expressions.pg" />
      </exercise>

      <exercise permid="RvO">
        <webwork source="Library/FortLewis/Algebra/1-1-Expressions/MCH1-1-1-02-Expressions.pg" />
      </exercise>

    </exercisegroup>
    <exercisegroup permid="Psg" cols="2">
      <title>Applications of Simplifying Polynomials</title>
      <exercise permid="xCX">
        <webwork source="BasicAlgebra/EvaluateExpressions/EvaluateFormula30.pg" />
      </exercise>

      <exercise permid="dKg">
        <webwork source="BasicAlgebra/EvaluateExpressions/EvaluateFormula30.pg" />
      </exercise>

    </exercisegroup>
    <exercisegroup permid="vzp">

      <exercise permid="JRp">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtractApplication10.pg" />
      </exercise>

      <exercise permid="pYy">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtractApplication10.pg" />
      </exercise>

      <exercise permid="WfH">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtractApplication20.pg" />
      </exercise>

      <exercise permid="CmQ">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtractApplication20.pg" />
      </exercise>

      <exercise permid="itZ">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtractApplication30.pg" />
      </exercise>

      <exercise permid="OBi">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtractApplication30.pg" />
      </exercise>

      <exercise permid="uIr">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtractApplication40.pg" />
      </exercise>

      <exercise permid="aPA">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtractApplication40.pg" />
      </exercise>

    </exercisegroup>
  </exercises>
</section>

